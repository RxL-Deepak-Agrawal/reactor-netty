/*
 * Copyright (c) 2020-2024 VMware, Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.nio.file.Files

apply plugin: 'io.spring.javadoc-aggregate'

dependencies {
	api project(':reactor-netty5-core')
	api project(':reactor-netty5-http')

	// JSR-305 annotations
	compileOnly "com.google.code.findbugs:jsr305:$jsr305Version"

	compileOnly "io.micrometer:micrometer-core:$micrometerVersion"
	compileOnly "io.micrometer:micrometer-tracing:$micrometerTracingVersion"
	compileOnly "io.micrometer:context-propagation:$contextPropagationVersion"
	compileOnly "io.netty.contrib:netty-codec-haproxy:$nettyContribVersion"
	compileOnly "io.netty:netty5-transport-classes-kqueue:$nettyVersion"
	compileOnly "io.netty:netty5-transport-classes-io_uring:$nettyVersion"
	compileOnly "io.projectreactor.addons:reactor-pool:$reactorPoolVersion"
}

jar {
	manifest {
		attributes("Automatic-Module-Name": "reactor.netty")
	}
}

description = "Reactor Netty with all modules"

task includePdf {
	dependsOn ":docs:antora"

	doLast {
		// Include the generated PDF file in the zip file if it exists
		def version = project.version.takeWhile { it != '-' }
		def pdfFile = file("../docs/build/assembler/reactor-netty/${version}/reactor-netty-reference-guide.pdf")
		if (pdfFile.exists()) {
			docsZip.from(pdfFile) {
				rename { fileName ->
					"docs/reactor-netty5-reference-guide-${project.version}.pdf"
				}
			}
		}
	}
}

task docsZip(type: Zip) {
	dependsOn "includePdf"

	group = 'Distribution'
	archiveBaseName.set("reactor-netty5")
	archiveClassifier = 'docs'
	description = "Builds docs archive containing reference for deployment at static.spring.io/reactor-netty5/docs."
	duplicatesStrategy "fail"
	def docsDir = file('../docs/build/site')

	doFirst {
		if (!docsDir.exists() || !Files.list(docsDir.toPath()).findFirst().isPresent()) {
			logger.lifecycle("Docs directory does not exist or is empty. Skipping docsZip task.")
			enabled = false
		}
	}

	from ('../docs/build/site') {
		into 'docs'
	}
}

artifacts {
	archives docsZip
}

javadoc.dependsOn(aggregateJavadoc)

//add docs.zip to the publication
if (tasks.docsZip.enabled) {
	publishing.publications.mavenJava.artifact(docsZip)
}
